// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.2
// source: contrib.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContributionState int32

const (
	ContributionState_STATE_UNDEFINED        ContributionState = 0
	ContributionState_STATE_REQUEST_APPROVAL ContributionState = 1
	ContributionState_STATE_PENDING          ContributionState = 2
	ContributionState_STATE_APPROVED         ContributionState = 3
	ContributionState_STATE_REJECTED         ContributionState = 4
)

// Enum value maps for ContributionState.
var (
	ContributionState_name = map[int32]string{
		0: "STATE_UNDEFINED",
		1: "STATE_REQUEST_APPROVAL",
		2: "STATE_PENDING",
		3: "STATE_APPROVED",
		4: "STATE_REJECTED",
	}
	ContributionState_value = map[string]int32{
		"STATE_UNDEFINED":        0,
		"STATE_REQUEST_APPROVAL": 1,
		"STATE_PENDING":          2,
		"STATE_APPROVED":         3,
		"STATE_REJECTED":         4,
	}
)

func (x ContributionState) Enum() *ContributionState {
	p := new(ContributionState)
	*p = x
	return p
}

func (x ContributionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributionState) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_proto_enumTypes[0].Descriptor()
}

func (ContributionState) Type() protoreflect.EnumType {
	return &file_contrib_proto_enumTypes[0]
}

func (x ContributionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributionState.Descriptor instead.
func (ContributionState) EnumDescriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{0}
}

type Reward_RewardKind int32

const (
	Reward_UNKNOWN  Reward_RewardKind = 0
	Reward_DONATION Reward_RewardKind = 1
)

// Enum value maps for Reward_RewardKind.
var (
	Reward_RewardKind_name = map[int32]string{
		0: "UNKNOWN",
		1: "DONATION",
	}
	Reward_RewardKind_value = map[string]int32{
		"UNKNOWN":  0,
		"DONATION": 1,
	}
)

func (x Reward_RewardKind) Enum() *Reward_RewardKind {
	p := new(Reward_RewardKind)
	*p = x
	return p
}

func (x Reward_RewardKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reward_RewardKind) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_proto_enumTypes[1].Descriptor()
}

func (Reward_RewardKind) Type() protoreflect.EnumType {
	return &file_contrib_proto_enumTypes[1]
}

func (x Reward_RewardKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reward_RewardKind.Descriptor instead.
func (Reward_RewardKind) EnumDescriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{22, 0}
}

type Tscript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publication string `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	Series      int32  `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	Episode     int32  `protobuf:"varint,4,opt,name=episode,proto3" json:"episode,omitempty"`
}

func (x *Tscript) Reset() {
	*x = Tscript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tscript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tscript) ProtoMessage() {}

func (x *Tscript) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tscript.ProtoReflect.Descriptor instead.
func (*Tscript) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{0}
}

func (x *Tscript) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tscript) GetPublication() string {
	if x != nil {
		return x.Publication
	}
	return ""
}

func (x *Tscript) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *Tscript) GetEpisode() int32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IdentityIconImg string `protobuf:"bytes,3,opt,name=identity_icon_img,json=identityIconImg,proto3" json:"identity_icon_img,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{1}
}

func (x *Author) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Author) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Author) GetIdentityIconImg() string {
	if x != nil {
		return x.IdentityIconImg
	}
	return ""
}

type ChunkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumPending           int32  `protobuf:"varint,1,opt,name=num_pending,json=numPending,proto3" json:"num_pending,omitempty"`
	NumSubmitted         int32  `protobuf:"varint,2,opt,name=num_submitted,json=numSubmitted,proto3" json:"num_submitted,omitempty"`
	SuggestedNextChunkId string `protobuf:"bytes,3,opt,name=suggested_next_chunk_id,json=suggestedNextChunkId,proto3" json:"suggested_next_chunk_id,omitempty"`
}

func (x *ChunkStats) Reset() {
	*x = ChunkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStats) ProtoMessage() {}

func (x *ChunkStats) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStats.ProtoReflect.Descriptor instead.
func (*ChunkStats) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkStats) GetNumPending() int32 {
	if x != nil {
		return x.NumPending
	}
	return 0
}

func (x *ChunkStats) GetNumSubmitted() int32 {
	if x != nil {
		return x.NumSubmitted
	}
	return 0
}

func (x *ChunkStats) GetSuggestedNextChunkId() string {
	if x != nil {
		return x.SuggestedNextChunkId
	}
	return ""
}

type GetChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{3}
}

func (x *GetChunkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TscriptId        string `protobuf:"bytes,2,opt,name=tscript_id,json=tscriptId,proto3" json:"tscript_id,omitempty"`
	Raw              string `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
	AudioClipUri     string `protobuf:"bytes,4,opt,name=audio_clip_uri,json=audioClipUri,proto3" json:"audio_clip_uri,omitempty"`
	NumContributions int32  `protobuf:"varint,5,opt,name=num_contributions,json=numContributions,proto3" json:"num_contributions,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{4}
}

func (x *Chunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chunk) GetTscriptId() string {
	if x != nil {
		return x.TscriptId
	}
	return ""
}

func (x *Chunk) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Chunk) GetAudioClipUri() string {
	if x != nil {
		return x.AudioClipUri
	}
	return ""
}

func (x *Chunk) GetNumContributions() int32 {
	if x != nil {
		return x.NumContributions
	}
	return 0
}

type CreateChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId    string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *CreateChunkContributionRequest) Reset() {
	*x = CreateChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkContributionRequest) ProtoMessage() {}

func (x *CreateChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*CreateChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{5}
}

func (x *CreateChunkContributionRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CreateChunkContributionRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

type ChunkContribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChunkId    string            `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Transcript string            `protobuf:"bytes,3,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State      ContributionState `protobuf:"varint,5,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	Author     *Author           `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	CreatedAt  string            `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ChunkContribution) Reset() {
	*x = ChunkContribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkContribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkContribution) ProtoMessage() {}

func (x *ChunkContribution) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkContribution.ProtoReflect.Descriptor instead.
func (*ChunkContribution) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkContribution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkContribution) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkContribution) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *ChunkContribution) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *ChunkContribution) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ChunkContribution) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type ShortChunkContribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChunkId  string            `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	AuthorId string            `protobuf:"bytes,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	State    ContributionState `protobuf:"varint,5,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
}

func (x *ShortChunkContribution) Reset() {
	*x = ShortChunkContribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortChunkContribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortChunkContribution) ProtoMessage() {}

func (x *ShortChunkContribution) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortChunkContribution.ProtoReflect.Descriptor instead.
func (*ShortChunkContribution) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{7}
}

func (x *ShortChunkContribution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortChunkContribution) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ShortChunkContribution) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ShortChunkContribution) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

type ChunkChunkContributionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contributions []*ShortChunkContribution `protobuf:"bytes,1,rep,name=contributions,proto3" json:"contributions,omitempty"`
}

func (x *ChunkChunkContributionList) Reset() {
	*x = ChunkChunkContributionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkChunkContributionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkChunkContributionList) ProtoMessage() {}

func (x *ChunkChunkContributionList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkChunkContributionList.ProtoReflect.Descriptor instead.
func (*ChunkChunkContributionList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{8}
}

func (x *ChunkChunkContributionList) GetContributions() []*ShortChunkContribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type SubmitDialogCorrectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeId  string `protobuf:"bytes,1,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Correction string `protobuf:"bytes,3,opt,name=correction,proto3" json:"correction,omitempty"`
}

func (x *SubmitDialogCorrectionRequest) Reset() {
	*x = SubmitDialogCorrectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDialogCorrectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDialogCorrectionRequest) ProtoMessage() {}

func (x *SubmitDialogCorrectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitDialogCorrectionRequest.ProtoReflect.Descriptor instead.
func (*SubmitDialogCorrectionRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitDialogCorrectionRequest) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *SubmitDialogCorrectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubmitDialogCorrectionRequest) GetCorrection() string {
	if x != nil {
		return x.Correction
	}
	return ""
}

type UpdateChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string            `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
	Transcript     string            `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State          ContributionState `protobuf:"varint,3,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
}

func (x *UpdateChunkContributionRequest) Reset() {
	*x = UpdateChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkContributionRequest) ProtoMessage() {}

func (x *UpdateChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*UpdateChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateChunkContributionRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

func (x *UpdateChunkContributionRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *UpdateChunkContributionRequest) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

type DeleteChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
}

func (x *DeleteChunkContributionRequest) Reset() {
	*x = DeleteChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkContributionRequest) ProtoMessage() {}

func (x *DeleteChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*DeleteChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteChunkContributionRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

type RequestChunkContributionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string            `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
	RequestState   ContributionState `protobuf:"varint,2,opt,name=request_state,json=requestState,proto3,enum=rsk.ContributionState" json:"request_state,omitempty"`
	Comment        string            `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RequestChunkContributionStateRequest) Reset() {
	*x = RequestChunkContributionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChunkContributionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChunkContributionStateRequest) ProtoMessage() {}

func (x *RequestChunkContributionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChunkContributionStateRequest.ProtoReflect.Descriptor instead.
func (*RequestChunkContributionStateRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{12}
}

func (x *RequestChunkContributionStateRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

func (x *RequestChunkContributionStateRequest) GetRequestState() ContributionState {
	if x != nil {
		return x.RequestState
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *RequestChunkContributionStateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
}

func (x *GetChunkContributionRequest) Reset() {
	*x = GetChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkContributionRequest) ProtoMessage() {}

func (x *GetChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*GetChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{13}
}

func (x *GetChunkContributionRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

type ListTscriptChunkContributionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListTscriptChunkContributionsRequest) Reset() {
	*x = ListTscriptChunkContributionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTscriptChunkContributionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTscriptChunkContributionsRequest) ProtoMessage() {}

func (x *ListTscriptChunkContributionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTscriptChunkContributionsRequest.ProtoReflect.Descriptor instead.
func (*ListTscriptChunkContributionsRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{14}
}

func (x *ListTscriptChunkContributionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListTscriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTscriptsRequest) Reset() {
	*x = ListTscriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTscriptsRequest) ProtoMessage() {}

func (x *ListTscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTscriptsRequest.ProtoReflect.Descriptor instead.
func (*ListTscriptsRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{15}
}

type TscriptList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tscripts []*TscriptStats `protobuf:"bytes,1,rep,name=tscripts,proto3" json:"tscripts,omitempty"`
}

func (x *TscriptList) Reset() {
	*x = TscriptList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TscriptList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TscriptList) ProtoMessage() {}

func (x *TscriptList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TscriptList.ProtoReflect.Descriptor instead.
func (*TscriptList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{16}
}

func (x *TscriptList) GetTscripts() []*TscriptStats {
	if x != nil {
		return x.Tscripts
	}
	return nil
}

type TscriptStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publication                     string                  `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	Series                          int32                   `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	Episode                         int32                   `protobuf:"varint,4,opt,name=episode,proto3" json:"episode,omitempty"`
	ChunkContributions              map[string]*ChunkStates `protobuf:"bytes,5,rep,name=chunk_contributions,json=chunkContributions,proto3" json:"chunk_contributions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumChunks                       int32                   `protobuf:"varint,6,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	NumContributions                int32                   `protobuf:"varint,7,opt,name=num_contributions,json=numContributions,proto3" json:"num_contributions,omitempty"`
	NumPendingContributions         int32                   `protobuf:"varint,8,opt,name=num_pending_contributions,json=numPendingContributions,proto3" json:"num_pending_contributions,omitempty"`
	NumRequestApprovalContributions int32                   `protobuf:"varint,9,opt,name=num_request_approval_contributions,json=numRequestApprovalContributions,proto3" json:"num_request_approval_contributions,omitempty"`
	NumApprovedContributions        int32                   `protobuf:"varint,10,opt,name=num_approved_contributions,json=numApprovedContributions,proto3" json:"num_approved_contributions,omitempty"`
	NumRejectedContributions        int32                   `protobuf:"varint,11,opt,name=num_rejected_contributions,json=numRejectedContributions,proto3" json:"num_rejected_contributions,omitempty"`
}

func (x *TscriptStats) Reset() {
	*x = TscriptStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TscriptStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TscriptStats) ProtoMessage() {}

func (x *TscriptStats) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TscriptStats.ProtoReflect.Descriptor instead.
func (*TscriptStats) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{17}
}

func (x *TscriptStats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TscriptStats) GetPublication() string {
	if x != nil {
		return x.Publication
	}
	return ""
}

func (x *TscriptStats) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *TscriptStats) GetEpisode() int32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *TscriptStats) GetChunkContributions() map[string]*ChunkStates {
	if x != nil {
		return x.ChunkContributions
	}
	return nil
}

func (x *TscriptStats) GetNumChunks() int32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

func (x *TscriptStats) GetNumContributions() int32 {
	if x != nil {
		return x.NumContributions
	}
	return 0
}

func (x *TscriptStats) GetNumPendingContributions() int32 {
	if x != nil {
		return x.NumPendingContributions
	}
	return 0
}

func (x *TscriptStats) GetNumRequestApprovalContributions() int32 {
	if x != nil {
		return x.NumRequestApprovalContributions
	}
	return 0
}

func (x *TscriptStats) GetNumApprovedContributions() int32 {
	if x != nil {
		return x.NumApprovedContributions
	}
	return 0
}

func (x *TscriptStats) GetNumRejectedContributions() int32 {
	if x != nil {
		return x.NumRejectedContributions
	}
	return 0
}

type ChunkStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []ContributionState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=rsk.ContributionState" json:"states,omitempty"`
}

func (x *ChunkStates) Reset() {
	*x = ChunkStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStates) ProtoMessage() {}

func (x *ChunkStates) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStates.ProtoReflect.Descriptor instead.
func (*ChunkStates) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{18}
}

func (x *ChunkStates) GetStates() []ContributionState {
	if x != nil {
		return x.States
	}
	return nil
}

type AuthorLeaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authors []*AuthorRanking `protobuf:"bytes,1,rep,name=authors,proto3" json:"authors,omitempty"`
}

func (x *AuthorLeaderboard) Reset() {
	*x = AuthorLeaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorLeaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorLeaderboard) ProtoMessage() {}

func (x *AuthorLeaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorLeaderboard.ProtoReflect.Descriptor instead.
func (*AuthorLeaderboard) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{19}
}

func (x *AuthorLeaderboard) GetAuthors() []*AuthorRanking {
	if x != nil {
		return x.Authors
	}
	return nil
}

type AuthorRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author                *Author `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Approver              bool    `protobuf:"varint,2,opt,name=approver,proto3" json:"approver,omitempty"`
	AcceptedContributions int32   `protobuf:"varint,3,opt,name=accepted_contributions,json=acceptedContributions,proto3" json:"accepted_contributions,omitempty"`
	AwardValue            float32 `protobuf:"fixed32,4,opt,name=award_value,json=awardValue,proto3" json:"award_value,omitempty"`
}

func (x *AuthorRanking) Reset() {
	*x = AuthorRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorRanking) ProtoMessage() {}

func (x *AuthorRanking) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorRanking.ProtoReflect.Descriptor instead.
func (*AuthorRanking) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{20}
}

func (x *AuthorRanking) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *AuthorRanking) GetApprover() bool {
	if x != nil {
		return x.Approver
	}
	return false
}

func (x *AuthorRanking) GetAcceptedContributions() int32 {
	if x != nil {
		return x.AcceptedContributions
	}
	return 0
}

func (x *AuthorRanking) GetAwardValue() float32 {
	if x != nil {
		return x.AwardValue
	}
	return 0
}

type PendingRewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *PendingRewardList) Reset() {
	*x = PendingRewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingRewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingRewardList) ProtoMessage() {}

func (x *PendingRewardList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingRewardList.ProtoReflect.Descriptor instead.
func (*PendingRewardList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{21}
}

func (x *PendingRewardList) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind          Reward_RewardKind `protobuf:"varint,2,opt,name=kind,proto3,enum=rsk.Reward_RewardKind" json:"kind,omitempty"`
	Name          string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Criteria      string            `protobuf:"bytes,4,opt,name=criteria,proto3" json:"criteria,omitempty"`
	Value         float32           `protobuf:"fixed32,5,opt,name=value,proto3" json:"value,omitempty"`
	ValueCurrency string            `protobuf:"bytes,6,opt,name=value_currency,json=valueCurrency,proto3" json:"value_currency,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{22}
}

func (x *Reward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reward) GetKind() Reward_RewardKind {
	if x != nil {
		return x.Kind
	}
	return Reward_UNKNOWN
}

func (x *Reward) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reward) GetCriteria() string {
	if x != nil {
		return x.Criteria
	}
	return ""
}

func (x *Reward) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Reward) GetValueCurrency() string {
	if x != nil {
		return x.ValueCurrency
	}
	return ""
}

type ClaimRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Args:
	//	*ClaimRewardRequest_DonationArgs
	Args isClaimRewardRequest_Args `protobuf_oneof:"args"`
}

func (x *ClaimRewardRequest) Reset() {
	*x = ClaimRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRewardRequest) ProtoMessage() {}

func (x *ClaimRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimRewardRequest.ProtoReflect.Descriptor instead.
func (*ClaimRewardRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{23}
}

func (x *ClaimRewardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ClaimRewardRequest) GetArgs() isClaimRewardRequest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *ClaimRewardRequest) GetDonationArgs() *DonationArgs {
	if x, ok := x.GetArgs().(*ClaimRewardRequest_DonationArgs); ok {
		return x.DonationArgs
	}
	return nil
}

type isClaimRewardRequest_Args interface {
	isClaimRewardRequest_Args()
}

type ClaimRewardRequest_DonationArgs struct {
	DonationArgs *DonationArgs `protobuf:"bytes,2,opt,name=donation_args,json=donationArgs,proto3,oneof"`
}

func (*ClaimRewardRequest_DonationArgs) isClaimRewardRequest_Args() {}

type DonationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *DonationArgs) Reset() {
	*x = DonationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonationArgs) ProtoMessage() {}

func (x *DonationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonationArgs.ProtoReflect.Descriptor instead.
func (*DonationArgs) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{24}
}

func (x *DonationArgs) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

type ListDonationRecipientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *ListDonationRecipientsRequest) Reset() {
	*x = ListDonationRecipientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDonationRecipientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDonationRecipientsRequest) ProtoMessage() {}

func (x *ListDonationRecipientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDonationRecipientsRequest.ProtoReflect.Descriptor instead.
func (*ListDonationRecipientsRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{25}
}

func (x *ListDonationRecipientsRequest) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

type DonationRecipientList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []*DonationRecipient `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *DonationRecipientList) Reset() {
	*x = DonationRecipientList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonationRecipientList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonationRecipientList) ProtoMessage() {}

func (x *DonationRecipientList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonationRecipientList.ProtoReflect.Descriptor instead.
func (*DonationRecipientList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{26}
}

func (x *DonationRecipientList) GetOrganizations() []*DonationRecipient {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type DonationRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mission string `protobuf:"bytes,3,opt,name=mission,proto3" json:"mission,omitempty"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	NgoId   string `protobuf:"bytes,5,opt,name=ngo_id,json=ngoId,proto3" json:"ngo_id,omitempty"`
	Url     string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Quote   string `protobuf:"bytes,7,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *DonationRecipient) Reset() {
	*x = DonationRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonationRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonationRecipient) ProtoMessage() {}

func (x *DonationRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonationRecipient.ProtoReflect.Descriptor instead.
func (*DonationRecipient) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{27}
}

func (x *DonationRecipient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DonationRecipient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DonationRecipient) GetMission() string {
	if x != nil {
		return x.Mission
	}
	return ""
}

func (x *DonationRecipient) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *DonationRecipient) GetNgoId() string {
	if x != nil {
		return x.NgoId
	}
	return ""
}

func (x *DonationRecipient) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DonationRecipient) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type ClaimedRewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*ClaimedReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *ClaimedRewardList) Reset() {
	*x = ClaimedRewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimedRewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedRewardList) ProtoMessage() {}

func (x *ClaimedRewardList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedRewardList.ProtoReflect.Descriptor instead.
func (*ClaimedRewardList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{28}
}

func (x *ClaimedRewardList) GetRewards() []*ClaimedReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type ClaimedReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClaimKind        string  `protobuf:"bytes,2,opt,name=claim_kind,json=claimKind,proto3" json:"claim_kind,omitempty"`
	ClaimValue       float32 `protobuf:"fixed32,3,opt,name=claim_value,json=claimValue,proto3" json:"claim_value,omitempty"`
	ClaimCurrency    string  `protobuf:"bytes,4,opt,name=claim_currency,json=claimCurrency,proto3" json:"claim_currency,omitempty"`
	ClaimDescription string  `protobuf:"bytes,5,opt,name=claim_description,json=claimDescription,proto3" json:"claim_description,omitempty"`
	ClaimAt          string  `protobuf:"bytes,6,opt,name=claim_at,json=claimAt,proto3" json:"claim_at,omitempty"`
}

func (x *ClaimedReward) Reset() {
	*x = ClaimedReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedReward) ProtoMessage() {}

func (x *ClaimedReward) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedReward.ProtoReflect.Descriptor instead.
func (*ClaimedReward) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{29}
}

func (x *ClaimedReward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClaimedReward) GetClaimKind() string {
	if x != nil {
		return x.ClaimKind
	}
	return ""
}

func (x *ClaimedReward) GetClaimValue() float32 {
	if x != nil {
		return x.ClaimValue
	}
	return 0
}

func (x *ClaimedReward) GetClaimCurrency() string {
	if x != nil {
		return x.ClaimCurrency
	}
	return ""
}

func (x *ClaimedReward) GetClaimDescription() string {
	if x != nil {
		return x.ClaimDescription
	}
	return ""
}

func (x *ClaimedReward) GetClaimAt() string {
	if x != nil {
		return x.ClaimAt
	}
	return ""
}

type ListChunkContributionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter        string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	SortField     string `protobuf:"bytes,2,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortDirection string `protobuf:"bytes,3,opt,name=sort_direction,json=sortDirection,proto3" json:"sort_direction,omitempty"`
	Page          int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListChunkContributionsRequest) Reset() {
	*x = ListChunkContributionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChunkContributionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunkContributionsRequest) ProtoMessage() {}

func (x *ListChunkContributionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunkContributionsRequest.ProtoReflect.Descriptor instead.
func (*ListChunkContributionsRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{30}
}

func (x *ListChunkContributionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListChunkContributionsRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListChunkContributionsRequest) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *ListChunkContributionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListChunkContributionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ChunkContributionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contributions []*ChunkContribution `protobuf:"bytes,1,rep,name=contributions,proto3" json:"contributions,omitempty"`
}

func (x *ChunkContributionList) Reset() {
	*x = ChunkContributionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkContributionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkContributionList) ProtoMessage() {}

func (x *ChunkContributionList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkContributionList.ProtoReflect.Descriptor instead.
func (*ChunkContributionList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{31}
}

func (x *ChunkContributionList) GetContributions() []*ChunkContribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type ListChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TscriptId     string `protobuf:"bytes,1,opt,name=tscript_id,json=tscriptId,proto3" json:"tscript_id,omitempty"`
	Filter        string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	SortField     string `protobuf:"bytes,3,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortDirection string `protobuf:"bytes,4,opt,name=sort_direction,json=sortDirection,proto3" json:"sort_direction,omitempty"`
	Page          int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListChunksRequest) Reset() {
	*x = ListChunksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunksRequest) ProtoMessage() {}

func (x *ListChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunksRequest.ProtoReflect.Descriptor instead.
func (*ListChunksRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{32}
}

func (x *ListChunksRequest) GetTscriptId() string {
	if x != nil {
		return x.TscriptId
	}
	return ""
}

func (x *ListChunksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListChunksRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListChunksRequest) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *ListChunksRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListChunksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ChunkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *ChunkList) Reset() {
	*x = ChunkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkList) ProtoMessage() {}

func (x *ChunkList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkList.ProtoReflect.Descriptor instead.
func (*ChunkList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{33}
}

func (x *ChunkList) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type CreateTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid       string `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *CreateTranscriptChangeRequest) Reset() {
	*x = CreateTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTranscriptChangeRequest) ProtoMessage() {}

func (x *CreateTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*CreateTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTranscriptChangeRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

func (x *CreateTranscriptChangeRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

type ListTranscriptChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter        string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	SortField     string `protobuf:"bytes,2,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortDirection string `protobuf:"bytes,3,opt,name=sort_direction,json=sortDirection,proto3" json:"sort_direction,omitempty"`
	Page          int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListTranscriptChangesRequest) Reset() {
	*x = ListTranscriptChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTranscriptChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptChangesRequest) ProtoMessage() {}

func (x *ListTranscriptChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptChangesRequest.ProtoReflect.Descriptor instead.
func (*ListTranscriptChangesRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{35}
}

func (x *ListTranscriptChangesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTranscriptChangesRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListTranscriptChangesRequest) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *ListTranscriptChangesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTranscriptChangesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type UpdateTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Transcript string            `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State      ContributionState `protobuf:"varint,3,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
}

func (x *UpdateTranscriptChangeRequest) Reset() {
	*x = UpdateTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTranscriptChangeRequest) ProtoMessage() {}

func (x *UpdateTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateTranscriptChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTranscriptChangeRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *UpdateTranscriptChangeRequest) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

type DeleteTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTranscriptChangeRequest) Reset() {
	*x = DeleteTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTranscriptChangeRequest) ProtoMessage() {}

func (x *DeleteTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*DeleteTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteTranscriptChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TranscriptChangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*ShortTranscriptChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *TranscriptChangeList) Reset() {
	*x = TranscriptChangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptChangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptChangeList) ProtoMessage() {}

func (x *TranscriptChangeList) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptChangeList.ProtoReflect.Descriptor instead.
func (*TranscriptChangeList) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{38}
}

func (x *TranscriptChangeList) GetChanges() []*ShortTranscriptChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type TranscriptChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EpisodeId  string            `protobuf:"bytes,2,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Summary    string            `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Transcript string            `protobuf:"bytes,4,opt,name=transcript,proto3" json:"transcript,omitempty"`
	Diff       string            `protobuf:"bytes,5,opt,name=diff,proto3" json:"diff,omitempty"`
	State      ContributionState `protobuf:"varint,6,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	Author     *Author           `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	CreatedAt  string            `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Merged     bool              `protobuf:"varint,9,opt,name=merged,proto3" json:"merged,omitempty"`
}

func (x *TranscriptChange) Reset() {
	*x = TranscriptChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptChange) ProtoMessage() {}

func (x *TranscriptChange) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptChange.ProtoReflect.Descriptor instead.
func (*TranscriptChange) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{39}
}

func (x *TranscriptChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TranscriptChange) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *TranscriptChange) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *TranscriptChange) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *TranscriptChange) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

func (x *TranscriptChange) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *TranscriptChange) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *TranscriptChange) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TranscriptChange) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

type ShortTranscriptChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EpisodeId string            `protobuf:"bytes,2,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	State     ContributionState `protobuf:"varint,6,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	Author    *Author           `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	CreatedAt string            `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Merged    bool              `protobuf:"varint,9,opt,name=merged,proto3" json:"merged,omitempty"`
}

func (x *ShortTranscriptChange) Reset() {
	*x = ShortTranscriptChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortTranscriptChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortTranscriptChange) ProtoMessage() {}

func (x *ShortTranscriptChange) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortTranscriptChange.ProtoReflect.Descriptor instead.
func (*ShortTranscriptChange) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{40}
}

func (x *ShortTranscriptChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortTranscriptChange) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *ShortTranscriptChange) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *ShortTranscriptChange) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ShortTranscriptChange) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ShortTranscriptChange) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

type RequestTranscriptChangeStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State ContributionState `protobuf:"varint,2,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
}

func (x *RequestTranscriptChangeStateRequest) Reset() {
	*x = RequestTranscriptChangeStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTranscriptChangeStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTranscriptChangeStateRequest) ProtoMessage() {}

func (x *RequestTranscriptChangeStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTranscriptChangeStateRequest.ProtoReflect.Descriptor instead.
func (*RequestTranscriptChangeStateRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{41}
}

func (x *RequestTranscriptChangeStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestTranscriptChangeStateRequest) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

type GetTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTranscriptChangeRequest) Reset() {
	*x = GetTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTranscriptChangeRequest) ProtoMessage() {}

func (x *GetTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*GetTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_contrib_proto_rawDescGZIP(), []int{42}
}

func (x *GetTranscriptChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_contrib_proto protoreflect.FileDescriptor

var file_contrib_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x72, 0x73, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6d, 0x0a, 0x07, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x58,
	0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x70,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6c, 0x69, 0x70, 0x55, 0x72, 0x69, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x8e, 0x01, 0x0a, 0x16,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x1a,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a,
	0x1d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0b, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x74, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x22, 0xf8, 0x04, 0x0a, 0x0c, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a,
	0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x75,
	0x6d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x57, 0x0a, 0x17, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3d, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x41,
	0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x11,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x27, 0x0a, 0x0a,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x66, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x2c, 0x0a,
	0x0c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xab, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x41,
	0x0a, 0x11, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x41, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2f,
	0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22,
	0x53, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x7d, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x69, 0x66, 0x66, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x22, 0xd0,
	0x01, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x22, 0x63, 0x0a, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x2a, 0x7f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0xc6, 0x1f, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x72, 0x73, 0x6b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x92, 0x41, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x61, 0x92, 0x41, 0x44, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x47, 0x65,
	0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x2a, 0x0d, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x76, 0x92, 0x41, 0x4c,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20,
	0x61, 0x6e, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2a, 0x14, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x14, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x22, 0x67, 0x92, 0x41, 0x45, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x31, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x2e, 0x2a, 0x08, 0x67, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x72, 0x73, 0x6b,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x6a, 0x92, 0x41, 0x40, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x2a, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x7b, 0x74, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0xbc,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x92, 0x41, 0x45, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x23, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x2a, 0x16, 0x6c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0xcd, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x7b, 0x92, 0x41, 0x4c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2a, 0x14, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdd, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x73, 0x6b, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x92, 0x41, 0x59, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x36, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x20, 0x61, 0x20, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65,
	0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x2a, 0x17, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f,
	0x7b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xd7, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x73, 0x6b, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x92, 0x41, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a,
	0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x32, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xca, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x72, 0x92, 0x41, 0x43, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x20, 0x75, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a,
	0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x92, 0x41, 0x53, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x2e, 0x2a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x32, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d,
	0x92, 0x41, 0x56, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x38, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x2a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0xa8, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x92, 0x41, 0x43, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2e, 0x2a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4c, 0x92, 0x41, 0x27, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x61,
	0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x2a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x32, 0x17, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0xd0, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x76, 0x92, 0x41, 0x48, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x26, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x2a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x70, 0x92, 0x41, 0x47, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x26, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x2a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x6a, 0x92, 0x41, 0x3c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1d, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x2a, 0x13, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xd0, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x7b, 0x92, 0x41, 0x48, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x26, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x2a, 0x16, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2f, 0x7b, 0x65, 0x70, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x6e, 0x92, 0x41, 0x3d, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x2a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x32, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb7, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x61, 0x92, 0x41, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x2a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xe8, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x85, 0x01, 0x92, 0x41, 0x4e, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x27, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x62, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x2a, 0x1c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x32, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x7a,
	0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72,
	0x6d, 0x61, 0x6e, 0x73, 0x2f, 0x72, 0x73, 0x6b, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x92, 0x41,
	0x49, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x72, 0x3d, 0x0a, 0x25, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x2e, 0x12, 0x14, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x70, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_contrib_proto_rawDescOnce sync.Once
	file_contrib_proto_rawDescData = file_contrib_proto_rawDesc
)

func file_contrib_proto_rawDescGZIP() []byte {
	file_contrib_proto_rawDescOnce.Do(func() {
		file_contrib_proto_rawDescData = protoimpl.X.CompressGZIP(file_contrib_proto_rawDescData)
	})
	return file_contrib_proto_rawDescData
}

var file_contrib_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_contrib_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_contrib_proto_goTypes = []interface{}{
	(ContributionState)(0),                       // 0: rsk.ContributionState
	(Reward_RewardKind)(0),                       // 1: rsk.Reward.RewardKind
	(*Tscript)(nil),                              // 2: rsk.Tscript
	(*Author)(nil),                               // 3: rsk.Author
	(*ChunkStats)(nil),                           // 4: rsk.ChunkStats
	(*GetChunkRequest)(nil),                      // 5: rsk.GetChunkRequest
	(*Chunk)(nil),                                // 6: rsk.Chunk
	(*CreateChunkContributionRequest)(nil),       // 7: rsk.CreateChunkContributionRequest
	(*ChunkContribution)(nil),                    // 8: rsk.ChunkContribution
	(*ShortChunkContribution)(nil),               // 9: rsk.ShortChunkContribution
	(*ChunkChunkContributionList)(nil),           // 10: rsk.ChunkChunkContributionList
	(*SubmitDialogCorrectionRequest)(nil),        // 11: rsk.SubmitDialogCorrectionRequest
	(*UpdateChunkContributionRequest)(nil),       // 12: rsk.UpdateChunkContributionRequest
	(*DeleteChunkContributionRequest)(nil),       // 13: rsk.DeleteChunkContributionRequest
	(*RequestChunkContributionStateRequest)(nil), // 14: rsk.RequestChunkContributionStateRequest
	(*GetChunkContributionRequest)(nil),          // 15: rsk.GetChunkContributionRequest
	(*ListTscriptChunkContributionsRequest)(nil), // 16: rsk.ListTscriptChunkContributionsRequest
	(*ListTscriptsRequest)(nil),                  // 17: rsk.ListTscriptsRequest
	(*TscriptList)(nil),                          // 18: rsk.TscriptList
	(*TscriptStats)(nil),                         // 19: rsk.TscriptStats
	(*ChunkStates)(nil),                          // 20: rsk.ChunkStates
	(*AuthorLeaderboard)(nil),                    // 21: rsk.AuthorLeaderboard
	(*AuthorRanking)(nil),                        // 22: rsk.AuthorRanking
	(*PendingRewardList)(nil),                    // 23: rsk.PendingRewardList
	(*Reward)(nil),                               // 24: rsk.Reward
	(*ClaimRewardRequest)(nil),                   // 25: rsk.ClaimRewardRequest
	(*DonationArgs)(nil),                         // 26: rsk.DonationArgs
	(*ListDonationRecipientsRequest)(nil),        // 27: rsk.ListDonationRecipientsRequest
	(*DonationRecipientList)(nil),                // 28: rsk.DonationRecipientList
	(*DonationRecipient)(nil),                    // 29: rsk.DonationRecipient
	(*ClaimedRewardList)(nil),                    // 30: rsk.ClaimedRewardList
	(*ClaimedReward)(nil),                        // 31: rsk.ClaimedReward
	(*ListChunkContributionsRequest)(nil),        // 32: rsk.ListChunkContributionsRequest
	(*ChunkContributionList)(nil),                // 33: rsk.ChunkContributionList
	(*ListChunksRequest)(nil),                    // 34: rsk.ListChunksRequest
	(*ChunkList)(nil),                            // 35: rsk.ChunkList
	(*CreateTranscriptChangeRequest)(nil),        // 36: rsk.CreateTranscriptChangeRequest
	(*ListTranscriptChangesRequest)(nil),         // 37: rsk.ListTranscriptChangesRequest
	(*UpdateTranscriptChangeRequest)(nil),        // 38: rsk.UpdateTranscriptChangeRequest
	(*DeleteTranscriptChangeRequest)(nil),        // 39: rsk.DeleteTranscriptChangeRequest
	(*TranscriptChangeList)(nil),                 // 40: rsk.TranscriptChangeList
	(*TranscriptChange)(nil),                     // 41: rsk.TranscriptChange
	(*ShortTranscriptChange)(nil),                // 42: rsk.ShortTranscriptChange
	(*RequestTranscriptChangeStateRequest)(nil),  // 43: rsk.RequestTranscriptChangeStateRequest
	(*GetTranscriptChangeRequest)(nil),           // 44: rsk.GetTranscriptChangeRequest
	nil,                                          // 45: rsk.TscriptStats.ChunkContributionsEntry
	(*emptypb.Empty)(nil),                        // 46: google.protobuf.Empty
}
var file_contrib_proto_depIdxs = []int32{
	0,  // 0: rsk.ChunkContribution.state:type_name -> rsk.ContributionState
	3,  // 1: rsk.ChunkContribution.author:type_name -> rsk.Author
	0,  // 2: rsk.ShortChunkContribution.state:type_name -> rsk.ContributionState
	9,  // 3: rsk.ChunkChunkContributionList.contributions:type_name -> rsk.ShortChunkContribution
	0,  // 4: rsk.UpdateChunkContributionRequest.state:type_name -> rsk.ContributionState
	0,  // 5: rsk.RequestChunkContributionStateRequest.request_state:type_name -> rsk.ContributionState
	19, // 6: rsk.TscriptList.tscripts:type_name -> rsk.TscriptStats
	45, // 7: rsk.TscriptStats.chunk_contributions:type_name -> rsk.TscriptStats.ChunkContributionsEntry
	0,  // 8: rsk.ChunkStates.states:type_name -> rsk.ContributionState
	22, // 9: rsk.AuthorLeaderboard.authors:type_name -> rsk.AuthorRanking
	3,  // 10: rsk.AuthorRanking.author:type_name -> rsk.Author
	24, // 11: rsk.PendingRewardList.rewards:type_name -> rsk.Reward
	1,  // 12: rsk.Reward.kind:type_name -> rsk.Reward.RewardKind
	26, // 13: rsk.ClaimRewardRequest.donation_args:type_name -> rsk.DonationArgs
	29, // 14: rsk.DonationRecipientList.organizations:type_name -> rsk.DonationRecipient
	31, // 15: rsk.ClaimedRewardList.rewards:type_name -> rsk.ClaimedReward
	8,  // 16: rsk.ChunkContributionList.contributions:type_name -> rsk.ChunkContribution
	6,  // 17: rsk.ChunkList.chunks:type_name -> rsk.Chunk
	0,  // 18: rsk.UpdateTranscriptChangeRequest.state:type_name -> rsk.ContributionState
	42, // 19: rsk.TranscriptChangeList.changes:type_name -> rsk.ShortTranscriptChange
	0,  // 20: rsk.TranscriptChange.state:type_name -> rsk.ContributionState
	3,  // 21: rsk.TranscriptChange.author:type_name -> rsk.Author
	0,  // 22: rsk.ShortTranscriptChange.state:type_name -> rsk.ContributionState
	3,  // 23: rsk.ShortTranscriptChange.author:type_name -> rsk.Author
	0,  // 24: rsk.RequestTranscriptChangeStateRequest.state:type_name -> rsk.ContributionState
	20, // 25: rsk.TscriptStats.ChunkContributionsEntry.value:type_name -> rsk.ChunkStates
	17, // 26: rsk.ContribService.ListTscripts:input_type -> rsk.ListTscriptsRequest
	46, // 27: rsk.ContribService.GetChunkStats:input_type -> google.protobuf.Empty
	46, // 28: rsk.ContribService.GetAuthorLeaderboard:input_type -> google.protobuf.Empty
	5,  // 29: rsk.ContribService.GetChunk:input_type -> rsk.GetChunkRequest
	34, // 30: rsk.ContribService.ListChunks:input_type -> rsk.ListChunksRequest
	32, // 31: rsk.ContribService.ListChunkContributions:input_type -> rsk.ListChunkContributionsRequest
	15, // 32: rsk.ContribService.GetChunkContribution:input_type -> rsk.GetChunkContributionRequest
	7,  // 33: rsk.ContribService.CreateChunkContribution:input_type -> rsk.CreateChunkContributionRequest
	12, // 34: rsk.ContribService.UpdateChunkContribution:input_type -> rsk.UpdateChunkContributionRequest
	13, // 35: rsk.ContribService.DeleteChunkContribution:input_type -> rsk.DeleteChunkContributionRequest
	14, // 36: rsk.ContribService.RequesChunktContributionState:input_type -> rsk.RequestChunkContributionStateRequest
	46, // 37: rsk.ContribService.ListPendingRewards:input_type -> google.protobuf.Empty
	46, // 38: rsk.ContribService.ListClaimedRewards:input_type -> google.protobuf.Empty
	25, // 39: rsk.ContribService.ClaimReward:input_type -> rsk.ClaimRewardRequest
	27, // 40: rsk.ContribService.ListDonationRecipients:input_type -> rsk.ListDonationRecipientsRequest
	37, // 41: rsk.ContribService.ListTranscriptChanges:input_type -> rsk.ListTranscriptChangesRequest
	44, // 42: rsk.ContribService.GetTranscriptChange:input_type -> rsk.GetTranscriptChangeRequest
	36, // 43: rsk.ContribService.CreateTranscriptChange:input_type -> rsk.CreateTranscriptChangeRequest
	38, // 44: rsk.ContribService.UpdateTranscriptChange:input_type -> rsk.UpdateTranscriptChangeRequest
	39, // 45: rsk.ContribService.DeleteTranscriptChange:input_type -> rsk.DeleteTranscriptChangeRequest
	43, // 46: rsk.ContribService.RequestTranscriptChangeState:input_type -> rsk.RequestTranscriptChangeStateRequest
	18, // 47: rsk.ContribService.ListTscripts:output_type -> rsk.TscriptList
	4,  // 48: rsk.ContribService.GetChunkStats:output_type -> rsk.ChunkStats
	21, // 49: rsk.ContribService.GetAuthorLeaderboard:output_type -> rsk.AuthorLeaderboard
	6,  // 50: rsk.ContribService.GetChunk:output_type -> rsk.Chunk
	35, // 51: rsk.ContribService.ListChunks:output_type -> rsk.ChunkList
	33, // 52: rsk.ContribService.ListChunkContributions:output_type -> rsk.ChunkContributionList
	8,  // 53: rsk.ContribService.GetChunkContribution:output_type -> rsk.ChunkContribution
	8,  // 54: rsk.ContribService.CreateChunkContribution:output_type -> rsk.ChunkContribution
	8,  // 55: rsk.ContribService.UpdateChunkContribution:output_type -> rsk.ChunkContribution
	46, // 56: rsk.ContribService.DeleteChunkContribution:output_type -> google.protobuf.Empty
	8,  // 57: rsk.ContribService.RequesChunktContributionState:output_type -> rsk.ChunkContribution
	23, // 58: rsk.ContribService.ListPendingRewards:output_type -> rsk.PendingRewardList
	30, // 59: rsk.ContribService.ListClaimedRewards:output_type -> rsk.ClaimedRewardList
	46, // 60: rsk.ContribService.ClaimReward:output_type -> google.protobuf.Empty
	28, // 61: rsk.ContribService.ListDonationRecipients:output_type -> rsk.DonationRecipientList
	40, // 62: rsk.ContribService.ListTranscriptChanges:output_type -> rsk.TranscriptChangeList
	41, // 63: rsk.ContribService.GetTranscriptChange:output_type -> rsk.TranscriptChange
	41, // 64: rsk.ContribService.CreateTranscriptChange:output_type -> rsk.TranscriptChange
	41, // 65: rsk.ContribService.UpdateTranscriptChange:output_type -> rsk.TranscriptChange
	46, // 66: rsk.ContribService.DeleteTranscriptChange:output_type -> google.protobuf.Empty
	46, // 67: rsk.ContribService.RequestTranscriptChangeState:output_type -> google.protobuf.Empty
	47, // [47:68] is the sub-list for method output_type
	26, // [26:47] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_contrib_proto_init() }
func file_contrib_proto_init() {
	if File_contrib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contrib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tscript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkContribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortChunkContribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkChunkContributionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDialogCorrectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChunkContributionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTscriptChunkContributionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTscriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TscriptList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TscriptStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorLeaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingRewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDonationRecipientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonationRecipientList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonationRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimedRewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimedReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChunkContributionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkContributionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChunksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTranscriptChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptChangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortTranscriptChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTranscriptChangeStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contrib_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*ClaimRewardRequest_DonationArgs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contrib_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contrib_proto_goTypes,
		DependencyIndexes: file_contrib_proto_depIdxs,
		EnumInfos:         file_contrib_proto_enumTypes,
		MessageInfos:      file_contrib_proto_msgTypes,
	}.Build()
	File_contrib_proto = out.File
	file_contrib_proto_rawDesc = nil
	file_contrib_proto_goTypes = nil
	file_contrib_proto_depIdxs = nil
}
