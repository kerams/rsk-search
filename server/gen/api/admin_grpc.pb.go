// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	DeleteTscript(ctx context.Context, in *DeleteTscriptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTscriptImport(ctx context.Context, in *CreateTscriptImportRequest, opts ...grpc.CallOption) (*TscriptImport, error)
	ListTscriptImports(ctx context.Context, in *ListTscriptImportsRequest, opts ...grpc.CallOption) (*TscriptImportList, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) DeleteTscript(ctx context.Context, in *DeleteTscriptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.AdminService/DeleteTscript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateTscriptImport(ctx context.Context, in *CreateTscriptImportRequest, opts ...grpc.CallOption) (*TscriptImport, error) {
	out := new(TscriptImport)
	err := c.cc.Invoke(ctx, "/rsk.AdminService/CreateTscriptImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTscriptImports(ctx context.Context, in *ListTscriptImportsRequest, opts ...grpc.CallOption) (*TscriptImportList, error) {
	out := new(TscriptImportList)
	err := c.cc.Invoke(ctx, "/rsk.AdminService/ListTscriptImports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	DeleteTscript(context.Context, *DeleteTscriptRequest) (*emptypb.Empty, error)
	CreateTscriptImport(context.Context, *CreateTscriptImportRequest) (*TscriptImport, error)
	ListTscriptImports(context.Context, *ListTscriptImportsRequest) (*TscriptImportList, error)
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) DeleteTscript(context.Context, *DeleteTscriptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTscript not implemented")
}
func (UnimplementedAdminServiceServer) CreateTscriptImport(context.Context, *CreateTscriptImportRequest) (*TscriptImport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTscriptImport not implemented")
}
func (UnimplementedAdminServiceServer) ListTscriptImports(context.Context, *ListTscriptImportsRequest) (*TscriptImportList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTscriptImports not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_DeleteTscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteTscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.AdminService/DeleteTscript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteTscript(ctx, req.(*DeleteTscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateTscriptImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTscriptImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTscriptImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.AdminService/CreateTscriptImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTscriptImport(ctx, req.(*CreateTscriptImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTscriptImports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTscriptImportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTscriptImports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.AdminService/ListTscriptImports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTscriptImports(ctx, req.(*ListTscriptImportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rsk.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteTscript",
			Handler:    _AdminService_DeleteTscript_Handler,
		},
		{
			MethodName: "CreateTscriptImport",
			Handler:    _AdminService_CreateTscriptImport_Handler,
		},
		{
			MethodName: "ListTscriptImports",
			Handler:    _AdminService_ListTscriptImports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
